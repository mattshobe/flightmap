#summary How to configure Eclipse for development.
#labels Featured
<wiki:toc max_depth="3" />
= Introduction =

Read GettingStarted if you haven't already.

Eclipse is the easiest way to do Flight Map development, but it's not required. Here's how to set up Eclipse for this project. These instructions assume you know the basics of how to develop Java code in Eclipse, and that you've worked through one or more of the Android SDK tutorials using Eclipse. See the [http://developer.android.com/sdk/eclipse-adt.html Android Eclipse setup instructions] for details on installing the Eclipse plugin.

= Java Compiler Version =

Configure Eclipse to use a 1.6 compiler.
  * Preferences > Java > Compiler > Compiler - should be 1.6 with all boxes checked. 
  * Preferences > Java > Installed JREs - check "JVM 1.6" 

= Code Style =
Use the Eclipse auto-formatter to format your code in a style that's consistent with other Flight Map developers. Here's how:
  # Download the [http://flightmap.googlecode.com/files/flightmap-eclipse-format.xml flightmap-eclipse-format.xml] file.
  # In Eclipse, File > Import. General > Preferences. Then select the above file.

Use the Eclipse auto-formatter by hitting ctl+shift+F (ctl+cmd+F on a Mac).

= Tips =
Use the *!LogCat* view to see log output from your emulator (Window > View > Other > !LogCat).

Use the *DDMS* perpective to send mock locations or replay a GPS track from a GPX file to your emulator (Window > Open Perspective > Other > DDMS).

= Eclipse Projects =
You'll need to create 3 different projects to correspond to the 3 code ProjectDirectories. One will be an Android project for the phone code, one will be for the common code and a third will be for the preprocessing code.

Depending on what part of the project you are working on, you may not actually need all three projects, but it's probably best to just set all three up in the beginning.

== Important Note on changing Common Code ==

You'll notice that the first two projects created depend on `common/release/flightmap-common-VERSION.jar`

If you make any changes to code in the *common* project, you'll need to re-generate the above jar file. Please use `ant` to do that as follows:
{{{
  cd common
  ant release
}}}

After doing the above, there are two more things to do:
  # Refresh the `android` and `preprocessing` projects (right-click on the project > Refresh).
    * That's needed for Eclipse to know that the jar file changed.
  # Check in the updated flightmap-common-VERSION.jar file.

== Android Project (1 of 3) ==

Create a new Android Project:
  # File > New > Project... > *Android Project*
  # Project Name: *!FlightMap-Android*
  # *Create project from existing source*
  # Set Location to where you have the `android` directory checked out (e.g. `/src/flightmap/android`).
  # Build Target
    * *Android 2.1 (API level 7)*
  # Min SDK Version: *7*
  # Finish

The project icon will have a little red X and lots of problems indicated. That's because the Android code has a dependency on the `common` code that you need to configure in the project properties.

=== Add common jar to build path ===
  # Right-click on the newly-created !FlightMap-Android project in the Package Explorer window on the left side.
  # Build Path > Add External Archives...
  # Browse to common/release/flightmap-common-VERSION.jar, select that
  # You should see flightmap-common-VERSION.jar listed under the "Referenced Libraries" area of the !FlightMap-Android project.

Now the little red X should be gone from the !FlightMap-Android project. You are done creating the Android project. Next, create the remaining two Eclipse projects.

== Preprocessing Project (2 of 3) ==
Do the same as for the common project above to create the !FlightMap-Preprocessing project.
  # File > New > *Java Project*
  # Project Name: *!FlightMap-Preprocessing*
  # *Create project from existing source*
  # Set Location to where you have the `preprocessing` directory checked out (e.g. `/src/flightmap/preprocessing`).
  # Finish

Just like with the !FlightMap-Android project, this one will have a little red X because you need to add the common jar to the build path. It's the same steps as before.

=== Add common jar to build path ===
  # Right-click on the newly-created !FlightMap-Preprocessing project in the Package Explorer window on the left side.
  # Build Path > Add External Archives...
  # Browse to common/release/flightmap-common-VERSION.jar, select that
  # You should see flightmap-common-VERSION.jar listed under the "Referenced Libraries" area of the !FlightMap-Preprocessing project.

== Common Project (3 of 3) ==
Create a project for the common code.
  # File > New > *Java Project*
  # Project Name: *!FlightMap-Common*
  # *Create project from existing source*
  # Set Location to where you have the `common` directory checked out (e.g. `/src/flightmap/common`).
  # Finish

No need to add the common jar to this project.

= Eclipse Troubleshooting =

If something isn't working right with Eclipse, try re-creating the project as follows.
  # Quit Eclipse
  # `cd` into the appropriate subdirectory (`android`, `common`, or `preprocessing`)
  # Remove the `.project` and `.classpath` files from the project that is giving you trouble.
  # Start Eclipse and re-create the project as described above.